<?xml version="1.0"?>
<doc>
<assembly>
<name>
SmartBotKit.Core
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:SmartBotKit.Application.TaskBarManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents an instance of the Windows taskbar
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Application.TaskBarManager.lock">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Object to lock on instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Application.TaskBarManager.Instance">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an instance of the Windows Taskbar
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Application.TaskBarManager.instanceB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A instance of the Windows Taskbar.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Application.TaskBarManager.OwnerHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the handle of the window whose taskbar button will be used to display progress.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Application.TaskBarManager.ownerHandleB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The handle of the window whose taskbar button will be used to display progress.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Application.TaskBarManager"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.PlatformNotSupportedException">
 Taskbar features are only supported on Windows 7 or newer.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetProgressValue(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays or updates a progress bar hosted in a taskbar button of the main application window 
 to show the specific percentage completed of the full operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="currentValue">
 The proportion of the operation that has been completed at the time the method is called.
 </param>
 
 <param name="maximumValue">
 The value <paramref name="currentValue"/> will have when the operation is complete.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetProgressValue(System.Int32,System.Int32,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays or updates a progress bar hosted in a taskbar button of the given window handle 
 to show the specific percentage completed of the full operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="currentValue">
 The proportion of the operation that has been completed at the time the method is called.
 </param>
 
 <param name="maximumValue">
 The value <paramref name="currentValue"/> will have when the operation is complete.
 </param>
 
 <param name="windowHandle">
 The handle of the window whose associated taskbar button is being used as a progress indicator.
 <para></para>
 This window belong to a calling process associated with the button's application and must be already loaded.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetProgressState(SmartBotKit.Interop.Win32.TaskbarProgressBarState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the type and state of the progress indicator displayed on a taskbar button of the main application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="state">
 Progress state of the progress button
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetProgressState(SmartBotKit.Interop.Win32.TaskbarProgressBarState,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the type and state of the progress indicator displayed on a taskbar button of the given window handle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="state">
 Progress state of the progress button
 </param>
 
 <param name="windowHandle">
 The handle of the window whose associated taskbar button is being used as a progress indicator.
 <para></para>
 This window belong to a calling process associated with the button's application and must be already loaded.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetThumbnailClip(System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="clipRect">
 A <see cref="T:System.Drawing.Rectangle"/> structure that specifies a selection within the window's client area, 
 relative to the upper-left corner of that client area. 
 
 To clear a clip that is already in place and return to the default display of the thumbnail, 
 set this parameter to <see langword="Nothing"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Application.TaskBarManager.SetThumbnailClip(System.Drawing.Rectangle,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="clipRect">
 A <see cref="T:System.Drawing.Rectangle"/> structure that specifies a selection within the window's client area, 
 relative to the upper-left corner of that client area. 
 
 To clear a clip that is already in place and return to the default display of the thumbnail, 
 set this parameter to <see langword="Nothing"/>.
 </param>
 
 <param name="windowHandle">
 The handle to the window represented in the taskbar.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Audio.AudioUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains audio related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Audio.AudioUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.SetMuteApplication(System.Diagnostics.Process,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Mute the audio volume of the specified process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pr">
 The process. 
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.IsApplicationMuted(System.Diagnostics.Process)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determine whether the audio volume of the specified process is muted.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pr">
 The process. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Returns <see langword="True"/> if the application is muted, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.GetPApplicationVolume(System.Diagnostics.Process)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the audio volume level of the specified process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pr">
 The process. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The audio volume, expressed in the range between 0 and 100.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.SetApplicationVolume(System.Diagnostics.Process,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the audio volume level for the specified process.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pr">
 The process. 
 </param>
 
 <param name="volumeLevel">
 The new volume level, expressed in the range between 0 and 100. 
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.EnumerateAudioSessionControls">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enumerate all the <see cref="T:SmartBotKit.Interop.Win32.IAudioSessionControl2"/> of the default (<see cref="T:SmartBotKit.Interop.Win32.IMMDevice"/>) audio device.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Credits to @Simon Mourier: <see href="https://stackoverflow.com/a/14322736/1248295"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Audio.AudioUtil.GetVolumeObject(System.Diagnostics.Process)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Searchs and returns the corresponding <see cref="T:SmartBotKit.Interop.Win32.ISimpleAudioVolume"/> for the specified <see cref="T:System.Diagnostics.Process"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Credits to @Simon Mourier: <see href="https://stackoverflow.com/a/14322736/1248295"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="pr">
 The <see cref="T:System.Diagnostics.Process"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:SmartBotKit.Interop.Win32.ISimpleAudioVolume"/>, 
 or <see langword="Nothing"/> if a <see cref="T:SmartBotKit.Interop.Win32.ISimpleAudioVolume"/> is not found for the specified process.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.TimeSpanExtensions.TimeSpanExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.TimeSpan"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.TimeSpanExtensions.TimeSpanExtensions.IsHourInRange(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determine whether the current time (hours, minutes, seconds and milliseconds, not including days) 
 in the source <see cref="T:System.TimeSpan"/> is 
 in range between the specified start time and end time range.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim input As TimeSpan = TimeSpan.Parse("00:00:00")
 Dim start As TimeSpan = TimeSpan.Parse("23:59:59")
 Dim [end] As TimeSpan = TimeSpan.Parse("00:00:01")
 
 Dim result As Boolean = input.IsHourInRange(start, [end])
 Console.WriteLine(result) ' result = True
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.TimeSpan"/>.
 </param>
 
 <param name="start">
 A <see cref="T:System.TimeSpan"/> that represents the start time.
 </param>
 
 <param name="[end]">
 A <see cref="T:System.TimeSpan"/> that represents the end time.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the current time in the source <see cref="T:System.TimeSpan"/> is 
 in range between the specified start time and end time range, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.TimeSpanExtensions.TimeSpanExtensions.IsInRange(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determine whether the current time (days, hours, minutes, seconds and milliseconds) 
 in the source <see cref="T:System.TimeSpan"/> is 
 in range between the specified start time and end time range.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim input As TimeSpan = TimeSpan.Parse("1.00:00:00")
 Dim start As TimeSpan = TimeSpan.Parse("0.23:59:59")
 Dim [end] As TimeSpan = TimeSpan.Parse("1.00:00:01")
 
 Dim result As Boolean = input.IsInRange(start, [end])
 Console.WriteLine(result)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.TimeSpan"/>.
 </param>
 
 <param name="start">
 A <see cref="T:System.TimeSpan"/> that represents the start time.
 </param>
 
 <param name="[end]">
 A <see cref="T:System.TimeSpan"/> that represents the end time.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the current time in the source <see cref="T:System.TimeSpan"/> is 
 in range between the specified start time and end time range, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.IListExtensions.IListExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IList`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.IListExtensions.IListExtensions.Randomize``1(System.Collections.Generic.IList{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the elements of the source <see cref="T:System.Collections.Generic.IList`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9}
 Debug.WriteLine(String.Join(", ", col.Randomize))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IList`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.IEnumerableExtensions.IEnumerableExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Extensions.IEnumerableExtensions.IEnumerableExtensions.rand">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Random"/> instance to generate random secuences of numbers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.IEnumerableExtensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Randomizes the elements of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim col As IEnumerable(Of Integer) = {1, 2, 3, 4, 5, 6, 7, 8, 9}
 Debug.WriteLine(String.Join(", ", col.Randomize))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="sender">
 The source collection.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.RectangleExtensions.RectangleExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Drawing.Rectangle"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.RectangleExtensions.RectangleExtensions.ScaleBySizeDifference(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Scale the size and position of the source <see cref="T:System.Drawing.Rectangle"/> 
 by the difference of the specified sizes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim oldSize As New Size(640, 480)
 Dim oldRect As New Rectangle(New Point(100, 100), New Size(639, 479))
 
 Dim newSize As New Size(800, 600)
 Dim newRect As Rectangle = ScaleBySizeDifference(oldRect, oldSize, newSize)
 
 Console.WriteLine(String.Format("oldRect: {0}", oldRect.ToString())) ' {X=100,Y=100,Width=639,Height=479}
 Console.WriteLine(String.Format("newRect: {0}", newRect.ToString())) ' {X=125,Y=125,Width=798,Height=598}
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 
 <param name="fromSize">
 The source <see cref="T:System.Drawing.Size"/>.
 </param>
 
 <param name="toSize">
 The target <see cref="T:System.Drawing.Size"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Rectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Drawing.Bitmap"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.ConvertToPixelFormat(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the piel format of the source <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Bitmap"/>.
 </param>
 
 <param name="format">
 The new pixel format.
 </param>
 
 <param name="disposeSourceImage">
 If <see langword="True"/>, disposes the source <see cref="T:System.Drawing.Bitmap"/> object.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops a <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Bitmap"/>.
 </param>
 
 <param name="x">
 The x coordinate.
 </param>
 
 <param name="y">
 The y coordinate.
 </param>
 
 <param name="width">
 The width.
 </param>
 
 <param name="height">
 The height.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Drawing.Point,System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops an <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Bitmap"/>.
 </param>
 
 <param name="location">
 The position of the area to crop.
 </param>
 
 <param name="size">
 The size of the area to crop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops an <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Bitmap"/>.
 </param>
 
 <param name="rect">
 A <see cref="T:System.Drawing.Rectangle"/> that specifies the size and position of the area to crop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.GetPixelInfo(System.Drawing.Bitmap)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 For each pixel in the source image, gets the <see cref="T:System.Drawing.Color"/>, pixel position, 
 and coordinates location respectivelly to the image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim color As Color = color.FromArgb(117, 228, 26)
 Dim bmp As Bitmap = CreateSolidcolorBitmap(New Size(2, 2), color, PixelFormat.Format32bppArgb)
 Dim pxInfoCol As IEnumerable(Of PixelInfo) = bmp.GetPixelInfo()
 
 For Each pxInfo As PixelInfo In pxInfoCol
     Console.WriteLine(String.Format("Position: {0}, Location: {1}, Color: {2}",
                                     pxInfo.Position, pxInfo.Location.ToString(), pxInfo.Color.ToString()))
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:System.Drawing.Color"/>, pixel position, 
 and coordinates location respectivelly to the image, of each pixel in the image.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.BitmapExtensions.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resizes an <see cref="T:System.Drawing.Bitmap"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Bitmap"/>.
 </param>
 
 <param name="size">
 The new size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resized <see cref="T:System.Drawing.Bitmap"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Value greater than 0 is required.;width
 or
 Value greater than 0 is required.;height
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.ImageExtensions.ImageExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.Drawing.Image"/> type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.ConvertToPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Converts the piel format of the source <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Image"/>.
 </param>
 
 <param name="format">
 The new pixel format.
 </param>
 
 <param name="disposeSourceImage">
 If <see langword="True"/>, disposes the source <see cref="T:System.Drawing.Image"/> object.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops an <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Image"/>.
 </param>
 
 <param name="x">
 The x coordinate.
 </param>
 
 <param name="y">
 The y coordinate.
 </param>
 
 <param name="width">
 The width.
 </param>
 
 <param name="height">
 The height.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.Crop(System.Drawing.Image,System.Drawing.Point,System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops an <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Image"/>.
 </param>
 
 <param name="location">
 The position of the area to crop.
 </param>
 
 <param name="size">
 The size of the area to crop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.Crop(System.Drawing.Image,System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Crops an <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Image"/>.
 </param>
 
 <param name="rect">
 A <see cref="T:System.Drawing.Rectangle"/> that specifies the size and position of the area to crop.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.GetPixelInfo(System.Drawing.Image)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 For each pixel in the source image, gets the <see cref="T:System.Drawing.Color"/>, pixel position, 
 and coordinates location respectivelly to the image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim color As Color = color.FromArgb(117, 228, 26)
 Dim bmp As Bitmap = CreateSolidcolorBitmap(New Size(2, 2), color, PixelFormat.Format32bppArgb)
 Dim pxInfoCol As IEnumerable(Of PixelInfo) = bmp.GetPixelInfo()
 
 For Each pxInfo As PixelInfo In pxInfoCol
     Console.WriteLine(String.Format("Position: {0}, Location: {1}, Color: {2}",
                                     pxInfo.Position, pxInfo.Location.ToString(), pxInfo.Color.ToString()))
 Next
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:System.Drawing.Color"/>, pixel position, 
 and coordinates location respectivelly to the image, of each pixel in the image.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.ImageExtensions.ImageExtensions.Resize(System.Drawing.Image,System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resizes an <see cref="T:System.Drawing.Image"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.Drawing.Image"/>.
 </param>
 
 <param name="size">
 The new size.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resized <see cref="T:System.Drawing.Image"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 Value greater than 0 is required.;width
 or
 Value greater than 0 is required.;height
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Extensions.StringExtensions.StringExtensions">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains custom extension methods to use with a <see cref="T:System.String"/> datatype.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Extensions.StringExtensions.StringExtensions.Rename(System.String,SmartBotKit.Text.StringCase)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Renames a string to the specified StringCase.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim str As String = "Hello World".Rename(StringCase.UpperCase)
 
 MessageBox.Show(str)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source <see cref="T:System.String"/>.
 </param>
 
 <param name="stringCase">
 The <see cref="T:SmartBotKit.Text.StringCase"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The renamed string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Imaging.ImageCaptureInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents the information of a region to capture in Hearthstone window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.ImageCaptureInfo.AspectRatio">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the aspect ratio of Hearthstone window, represented as X:Y. (for example: 16:9)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.ImageCaptureInfo.Resolution">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the resolution of Hearthstone window. (for example: 1920x1080)
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.ImageCaptureInfo.CaptureRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the rectangle that contains the location and size to capture the image in Hearthstone window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageCaptureInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageCaptureInfo.#ctor(System.Drawing.Point,System.Drawing.Size,System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="aspectRatio">
 The aspect ratio of Hearthstone window, represented as X:Y. (for example: 16:9)
 </param>
 
 <param name="resolution">
 The resolution of Hearthstone window. (for example: 1920x1080)
 </param>
 
 <param name="captureRectangle">
 The rectangle that contains the location and size to capture the image in Hearthstone window.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageCaptureInfo.Scale(System.Drawing.Size)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/> object 
 whose <see cref="P:SmartBotKit.Imaging.ImageCaptureInfo.CaptureRectangle"/> member is scaled to the specified size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="newResolution">
 The target resolution of Hearthstone window. (for example: 1920x1080)
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageCaptureInfo.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.String"/> that represents this <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String"/> that represents this <see cref="T:SmartBotKit.Imaging.ImageCaptureInfo"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Imaging.ImageUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains image related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------   
</member>
<member name="M:SmartBotKit.Imaging.ImageUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Imaging.ImageUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageUtil.TakeScreenshotFromObject(System.IntPtr,System.Drawing.Imaging.PixelFormat)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Takes a screenshot of an object in the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim jpgCodec As ImageCodecInfo =
     (From codec As ImageCodecInfo In ImageCodecInfo.GetImageDecoders
      Where codec.FormatID = ImageFormat.Jpeg.Guid).SingleOrDefault
 
 Dim encoderParams As New EncoderParameters(1)
 Dim qualityEncoder As Imaging.Encoder = Imaging.Encoder.Quality
 Dim qualityParameter As New EncoderParameter(qualityEncoder, 80)
 encoderParams.Param(0) = qualityParameter
 
 Dim hwnd As IntPtr = Process.GetProcessesByName("notepad").FirstOrDefault.MainWindowHandle
 
 Dim screenshot As Image = TakeScreenshotFromObject(hwnd)
 screenShot.Save("C:\Screenshot.jpg", jpgCodec, encoderParams)
 Process.Start("C:\Screenshot.jpg")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 The <see cref="T:System.IntPtr"/> window handle to the object.
 </param>
 
 <param name="pixelFormat">
 The image pixel format.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting image.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">
 The specified handle is not a valid window handle (hWnd).
 </exception>
 
 <exception cref="T:System.ArgumentException">
 The specified window is hidden.
 </exception>
 
 <exception cref="T:System.ComponentModel.Win32Exception">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageUtil.GetRealWindowRect(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the (non-client) <see cref="T:System.Drawing.Rectangle"/> of a window.
 <para></para>
 This method supports a borderless <c>Windows 10</c> window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting (non-client) <see cref="T:System.Drawing.Rectangle"/> of the window.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageUtil.GetRealWindowRect(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the (non-client) <see cref="T:System.Drawing.Rectangle"/> of a window.
 <para></para>
 This method supports a borderless <c>Windows 10</c> window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting (non-client) <see cref="T:System.Drawing.Rectangle"/> of the window.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.ImageUtil.ResolutionIsOfAspectRatio(System.Drawing.Size,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determine whether the source resolution belongs to the specified aspect ratio.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim resolution As New Size(width:=1920, height:=1080)
 Dim aspectRatio As New Point(x:=16, y:=9)
 
 Dim result As Boolean = ResolutionIsOfAspectRatio(resolution, aspectRatio)
 
 Console.WriteLine(result)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="resolution">
 The source resolution.
 </param>
 
 <param name="aspectRatio">
 The aspect ratio.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the source resolution belongs to the specified aspect ratio; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Imaging.PixelInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents pixel information relative to an image.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.PixelInfo.Color">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="P:SmartBotKit.Imaging.PixelInfo.Color"/> of the pixel.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="P:SmartBotKit.Imaging.PixelInfo.Color"/> of the pixel.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.PixelInfo.Position">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the position index of the pixel in the image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The position of the pixel in the image.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Imaging.PixelInfo.Location">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the location coordinates of the pixel relative to the image.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The pixel coordinates.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Imaging.PixelInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Imaging.PixelInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="color">
 The <see cref="P:SmartBotKit.Imaging.PixelInfo.Color"/> of the pixel.
 </param>
 
 <param name="position">
 The index position of the pixel in the image.
 </param>
 
 <param name="location">
 The location coordinates of the pixel relative to the image.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.#ctor(System.Drawing.Pen,System.Int32,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Imaging.PixelInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pen">
 The <see cref="T:System.Drawing.Pen"/> that contains the <see cref="P:SmartBotKit.Imaging.PixelInfo.Color"/> of the pixel.
 </param>
 
 <param name="position">
 The index position of the pixel in the image.
 </param>
 
 <param name="location">
 The location coordinates of the pixel relative to the image.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.#ctor(System.Drawing.SolidBrush,System.Int32,System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Imaging.PixelInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="brush">
 The <see cref="T:System.Drawing.SolidBrush"/> that contains the <see cref="P:SmartBotKit.Imaging.PixelInfo.Color"/> of the pixel.
 </param>
 
 <param name="position">
 The position index of the pixel in the image.
 </param>
 
 <param name="location">
 The location coordinates of the pixel relative to the image.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Imaging.PixelInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Imaging.PixelInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.FriendChallengeType.Normal">
 <summary>
 A normal friend challenge.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.FriendChallengeType.GoldQuest">
 <summary>
 A 80 gold quest friend challenge.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.FriendChallengeType.Undetermined">
 <summary>
 Undetermined. 
 <para></para>
 Useful for debug purposes, in scenarios on which <see cref="P:SmartBotKit.Interop.HearthMirrorFriendlyChallengeProvider.DialogVisible"/> is False.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.HearthstoneUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides reusable automation utilities for HearthstoneUtil.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.Process">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the Hearthstone <see cref="T:System.Diagnostics.Process"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone <see cref="T:System.Diagnostics.Process"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.HearthstoneUtil.processB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 <para></para>
 Gets the Hearthstone <see cref="T:System.Diagnostics.Process"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.MainThreadId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets identifier of the thread that created the Hearthstone main window; the UI thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The identifier of the thread that created the Hearthstone main window; the UI thread.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.WindowPlacement">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Hearthstone window placement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window placement.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.WindowPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Hearthstone window position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window position.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.WindowSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the Hearthstone window size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window size.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.HearthstoneUtil.IsFullscreen">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determine whether the Hearthstone window is fullscreen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determine whether the Hearthstone window is fullscreen.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.HearthstoneUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Interop.HearthstoneUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.SmartBotEvent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a SmartBot's process event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.Startup">
 <summary>
 Called at SmartBot's starup, when the plugin is built.
 <p></p>
 Method name: OnPluginCreated
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.BotStart">
 <summary>
 Called when the bot is started.
 <p></p>
 Method name: OnStarted
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.BotStop">
 <summary>
 Called when the bot is stopped.
 <p></p>
 Method name: OnStopped
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.GameBegin">
 <summary>
 Called when a game begins.
 <p></p>
 Method name: OnGameBegin
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.GameEnd">
 <summary>
 Called when a game ends.
 <p></p>
 Method name: OnGameEnd
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.TurnBegin">
 <summary>
 Called when a turn begins.
 <p></p>
 Method name: OnTurnBegin
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.TurnEnd">
 <summary>
 Called when a turn ends.
 <p></p>
 Method name: OnTurnEnd
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.TimerTick">
 <summary>
 Called when the bot timer is ticked, every 300 milliseconds.
 <p></p>
 Method name: OnTick
 </summary>
</member>
<member name="F:SmartBotKit.Interop.SmartBotEvent.Exit">
 <summary>
 Called before SmartBot's process termination.
 <p></p>
 Method name: Dispose
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.EDataFlow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines constants that indicate the direction in which audio data flows between an audio endpoint device and an application.
 <para></para>
 The <see cref="M:SmartBotKit.Interop.Win32.IMMDeviceEnumerator.GetDefaultAudioEndpoint(SmartBotKit.Interop.Win32.EDataFlow,SmartBotKit.Interop.Win32.ERole,SmartBotKit.Interop.Win32.IMMDevice@)"/>, 
 IMMDeviceEnumerator.EnumAudioEndpoints, 
 IMMEndpoint.GetDataFlow, and IMMNotificationClient.OnDefaultDeviceChanged methods 
 use the constants defined in the <see cref="T:SmartBotKit.Interop.Win32.EDataFlow"/> enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/mmdeviceapi/ne-mmdeviceapi-__midl___midl_itf_mmdeviceapi_0000_0000_0001"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.EDataFlow.Render">
 <summary>
 Audio rendering stream. 
 <para></para>
 Audio data flows from the application to the audio endpoint device, which renders the stream.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.EDataFlow.Capture">
 <summary>
 Audio capture stream. 
 <para></para>
 Audio data flows from the audio endpoint device that captures the stream, to the application.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.EDataFlow.All">
 <summary>
 Audio rendering or capture stream. 
 <para></para>
 Audio data can flow either from the application to the audio endpoint device, 
 or from the audio endpoint device to the application.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.EDataFlow.EDataFlow_enum_count">
 <summary>
 The number of members in the <see cref="T:SmartBotKit.Interop.Win32.EDataFlow"/> enumeration (not counting the <see cref="F:SmartBotKit.Interop.Win32.EDataFlow.EDataFlow_enum_count"/> member).
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.ERole">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines constants that indicate the role that the system has assigned to an audio endpoint device.
 <para></para>
 The <see cref="M:SmartBotKit.Interop.Win32.IMMDeviceEnumerator.GetDefaultAudioEndpoint(SmartBotKit.Interop.Win32.EDataFlow,SmartBotKit.Interop.Win32.ERole,SmartBotKit.Interop.Win32.IMMDevice@)"/> and 
 IMMNotificationClient.OnDefaultDeviceChanged methods use the constants defined in the <see cref="T:SmartBotKit.Interop.Win32.ERole"/> enumeration.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/mmdeviceapi/ne-mmdeviceapi-__midl___midl_itf_mmdeviceapi_0000_0000_0002"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.ERole.Console">
 <summary>
 Games, system notification sounds, and voice commands.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.ERole.Multimedia">
 <summary>
 Music, movies, narration, and live music recording.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.ERole.Communications">
 <summary>
 Voice communications (talking to another person).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.ERole.ERole_enum_count">
 <summary>
 The number of members in the <see cref="T:SmartBotKit.Interop.Win32.ERole"/> enumeration (not counting the <see cref="F:SmartBotKit.Interop.Win32.ERole.ERole_enum_count"/> member).
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.IAudioSessionControl">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables a client to configure the control parameters for an audio session and to monitor events in the session. 
 <para></para>
 The IAudioClient.Initialize method initializes a stream object and assigns the stream to an audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nn-audiopolicy-iaudiosessioncontrol"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionControl.GetDisplayName(System.String@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the display name for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refDisplayName">
 Receives a string that contains the display name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.IAudioSessionControl2">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables a client to configure the control parameters for an audio session and to monitor events in the session. 
 <para></para>
 The IAudioClient.Initialize method initializes a stream object and assigns the stream to an audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nn-audiopolicy-iaudiosessioncontrol"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionControl2.GetDisplayName(System.String@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the display name for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refDisplayName">
 Receives a string that contains the display name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionControl2.GetProcessId(System.UInt32@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the process identifier of the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refValue">
 Receives the process identifier of the audio session.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.IAudioSessionEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enumerates audio sessions on an audio device.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nn-audiopolicy-iaudiosessionenumerator"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionEnumerator.GetCount(System.Int32@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the total number of audio sessions that are open on the audio device.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refSessionCount">
 Receives the total number of audio sessions.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionEnumerator.GetSession(System.Int32,SmartBotKit.Interop.Win32.IAudioSessionControl@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Notifies the client that the display name for the session has changed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sessionCount">
 The session number. 
 If there are n sessions, the sessions are numbered from 0 to n – 1. 
 <para></para>
 To get the number of sessions, call the <see cref="M:SmartBotKit.Interop.Win32.IAudioSessionEnumerator.GetCount(System.Int32@)"/> function.
 </param>
 
 <param name="refSession">
 Receives a pointer to the <see cref="T:SmartBotKit.Interop.Win32.IAudioSessionControl"/> interface of the session object in the 
 collection that is maintained by the session enumerator. 
 <para></para>
 The caller must release the interface pointer.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.IAudioSessionManager2">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables an application to manage submixes for the audio device. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nn-audiopolicy-iaudiosessionmanager2"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IAudioSessionManager2.GetSessionEnumerator(SmartBotKit.Interop.Win32.IAudioSessionEnumerator@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a pointer to the audio session enumerator object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refSessionEnum">
 Receives an <see cref="T:SmartBotKit.Interop.Win32.IAudioSessionEnumerator"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 If it fails, it returns an <see cref="T:SmartBotKit.Interop.Win32.HResult"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.IMMDevice">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides methods for enumerating multimedia device resources. 
 <para></para>
 In the current implementation of the MMDevice API, 
 the only device resources that this interface can enumerate are audio endpoint devices. 
 <para></para>
 A client obtains a reference to an <see cref="T:SmartBotKit.Interop.Win32.IMMDeviceEnumerator"/> interface by calling the CoCreateInstance.
 <para></para>
 The device resources enumerated by the methods in the IMMDeviceEnumerator interface are represented as 
 collections of objects with <see cref="T:SmartBotKit.Interop.Win32.IMMDevice"/> interfaces. 
 <para></para>
 A collection has an IMMDeviceCollection interface. 
 The IMMDeviceEnumerator.EnumAudioEndpoints method creates a device collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/mmdeviceapi/nn-mmdeviceapi-immdevice"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IMMDevice.Activate(System.Guid@,System.Int32,System.IntPtr,System.Object@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a COM object with the specified interface
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refId">
 The interface identifier. 
 <para></para>
 This parameter is a reference to a GUID that identifies the interface that the caller requests be activated. 
 <para></para>
 The caller will use this interface to communicate with the COM object.
 </param>
 
 <param name="clsCtx">
 The execution context in which the code that manages the newly created object will run. 
 <para></para>
 The caller can restrict the context by setting this parameter to the bitwise OR of one or more CLSCTX enumeration values. 
 <para></para>
 Alternatively, the client can avoid imposing any context restrictions by specifying CLSCTX_ALL. 
 </param>
 
 <param name="activationParams">
 Set to <see cref="F:System.IntPtr.Zero"/> to activate an IAudioClient, IAudioEndpointVolume, 
 IAudioMeterInformation, IAudioSessionManager, or IDeviceTopology interface on an audio endpoint device. 
 <para></para>
 When activating an IBaseFilter, IDirectSound, IDirectSound8, 
 IDirectSoundCapture, or IDirectSoundCapture8 interface on the device, 
 the caller can specify a pointer to a PROPVARIANT structure that contains stream-initialization information.
 </param>
 
 <param name="refInterface">
 Pointer to a pointer variable into which the method writes the address of the interface specified by 
 parameter <paramref name="refId"/>. 
 <para></para>
 Through this method, the caller obtains a counted reference to the interface. 
 <para></para>
 The caller is responsible for releasing the interface, when it is no longer needed, 
 by calling the interface's Release method. 
 <para></para>
 If the <see cref="M:SmartBotKit.Interop.Win32.IMMDevice.Activate(System.Guid@,System.Int32,System.IntPtr,System.Object@)"/> call fails, <paramref name="refInterface"/> is <see langword="Nothing"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.IMMDeviceEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides methods for enumerating multimedia device resources. 
 <para></para>
 In the current implementation of the MMDevice API, 
 the only device resources that this interface can enumerate are audio endpoint devices. 
 <para></para>
 A client obtains a reference to an <see cref="T:SmartBotKit.Interop.Win32.IMMDeviceEnumerator"/> interface by calling the CoCreateInstance.
 <para></para>
 The device resources enumerated by the methods in the IMMDeviceEnumerator interface are represented as 
 collections of objects with <see cref="T:SmartBotKit.Interop.Win32.IMMDevice"/> interfaces. 
 <para></para>
 A collection has an IMMDeviceCollection interface. 
 The IMMDeviceEnumerator.EnumAudioEndpoints method creates a device collection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/mmdeviceapi/nn-mmdeviceapi-immdeviceenumerator"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.IMMDeviceEnumerator.GetDefaultAudioEndpoint(SmartBotKit.Interop.Win32.EDataFlow,SmartBotKit.Interop.Win32.ERole,SmartBotKit.Interop.Win32.IMMDevice@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the default audio endpoint for the specified data-flow direction and role.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dataFlow">
 The <see cref="T:SmartBotKit.Interop.Win32.EDataFlow"/> direction for the endpoint device.
 </param>
 
 <param name="role">
 The <see cref="T:SmartBotKit.Interop.Win32.ERole"/> of the endpoint device.
 </param>
 
 <param name="refDevice">
 The <see cref="T:SmartBotKit.Interop.Win32.IMMDevice"/> interface of the default audio endpoint device.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns HResult.S_OK. 
 If it fails, it returns an HResult value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.ISimpleAudioVolume">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enables a client to control the master volume level of an audio session. 
 <para></para>
 The IAudioClient.Initialize method initializes a stream object and assigns the stream to an audio session. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://docs.microsoft.com/en-us/windows/desktop/api/audioclient/nn-audioclient-isimpleaudiovolume"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.ISimpleAudioVolume.SetMasterVolume(System.Single,System.Guid)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the master volume level for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="levelNormalization">
 The new volume level expressed as a normalized value between 0.0 and 1.0.
 </param>
 
 <param name="eventContext">
 A user context value that is passed to the notification callback.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 If it fails, it returns an <see cref="T:SmartBotKit.Interop.Win32.HResult"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.ISimpleAudioVolume.GetMasterVolume(System.Single@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the client volume level for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refLevelNormalization">
 Receives the volume level expressed as a normalized value between 0.0 and 1.0.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 If it fails, it returns an <see cref="T:SmartBotKit.Interop.Win32.HResult"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.ISimpleAudioVolume.SetMute(System.Boolean,System.Guid)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the muting state for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isMuted">
 The new muting state.
 </param>
 
 <param name="eventContext">
 A user context value that is passed to the notification callback.
 </param>
 
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 If it fails, it returns an <see cref="T:SmartBotKit.Interop.Win32.HResult"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.ISimpleAudioVolume.GetMute(System.Boolean@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the current muting state for the audio session.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refIsMuted">
 Receives the muting state.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the method succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 If it fails, it returns an <see cref="T:SmartBotKit.Interop.Win32.HResult"/> value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.MMDeviceEnumerator">
 ----------------------------------------------------------------------------------------------------
 <summary>
 <c>CLSID_MMDeviceEnumerator</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.SetWindowPosFlags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The window sizing and positioning flags.
 <para></para>
 Flags combination for <c>uFlags</c> parameter of <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SmartBotKit.Interop.Win32.SetWindowPosFlags)"/> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/ms633545%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.None">
 <summary>
 Indicates any flag.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.AsyncWindowPos">
 <summary>
 If the calling thread and the thread that owns the window are attached to different input queues, 
 the system posts the request to the thread that owns the window.
 <para></para>
 This prevents the calling thread from blocking its execution while other threads process the request.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DeferErase">
 <summary>
 Prevents generation of the <c>WM_SYNCPAINT</c> message.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DrawFrame">
 <summary>
 Draws a frame (defined in the window's class description) around the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.FrameChanged">
 <summary>
 Applies new frame styles set using the SetWindowLong function.
 <para></para>
 Sends a <c>WM_NCCALCSIZE</c> message to the window, even if the window's size is not being changed.
 <para></para>
 If this flag is not specified, <c>WM_NCCALCSIZE</c> is sent only when the window's size is being changed.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.HideWindow">
 <summary>
 Hides the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontActivate">
 <summary>
 Does not activate the window.
 If this flag is not set, the window is activated and moved to the top of
 either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
 </summary>
 <remarks>SWP_NOACTIVATE</remarks>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontCopyBits">
 <summary>
 Discards the entire contents of the client area.
 <para></para>
 If this flag is not specified, the valid contents of the client area are saved and copied back 
 into the client area after the window is sized or repositioned.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.IgnoreMove">
 <summary>
 Retains the current position (ignores X and Y parameters).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontChangeOwnerZOrder">
 <summary>
 Does not change the owner window's position in the Z order.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontRedraw">
 <summary>
 Does not redraw changes.
 <para></para>
 If this flag is set, no repainting of any kind occurs.
 <para></para>
 This applies to the client area, the nonclient area (including the title bar and scroll bars), 
 and any part of the parent window uncovered as a result of the window being moved.
 <para></para>
 When this flag is set, the application must explicitly invalidate or redraw any parts of 
 the window and parent window that need redrawing.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontReposition">
 <summary>
 Same as the <see cref="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontChangeOwnerZOrder"/> flag.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.DontSendChangingEvent">
 <summary>
 Prevents the window from receiving the <c>WM_WINDOWPOSCHANGING</c> message.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.IgnoreResize">
 <summary>
 Retains the current size (ignores the cx and cy parameters).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.IgnoreZOrder">
 <summary>
 Retains the current Z order (ignores the <c>hwndInsertAfter</c> parameter).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.SetWindowPosFlags.ShowWindow">
 <summary>
 Displays the window.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.TernaryRasterOperations">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a raster-operation code.
 <para></para>
 These codes define how the color data for the source rectangle is to be combined with 
 the color data for the destination rectangle to achieve the final color.
 </summary>
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/dd183370%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.SrcCopy">
 <summary>
 [ Destination = Source ]
 <para></para>
 Copies the source rectangle directly to the destination rectangle.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.SrcPaint">
 <summary>
 [ Destination = Source OR Destination ]
 <para></para>
 Combines the colors of the source and destination rectangles by using the Boolean OR operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.SrcAnd">
 <summary>
 [ Destination = Source AND Destination ]
 <para></para>
 Combines the colors of the source and destination rectangles by using the Boolean AND operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.SrcInvert">
 <summary>
 [ Destination = Source XOR Destination ]
 <para></para>
 Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.SrcErase">
 <summary>
 [ Destination = Source AND NOT Destination ]
 <para></para>
 Combines the colors of the source and destination rectangles by using the Boolean OR operator and 
 then inverts the resultant color.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.NotSrcCopy">
 <summary>
 [ Destination = NOT Source ]
 <para></para>
 Copies the inverted source rectangle to the destination.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.NotSrcErase">
 <summary>
 [ Destination = NOT Source AND NOT Destinatio) ]
 <para></para>
 Combines the colors of the source and destination rectangles 
 by using the Boolean OR operator and then inverts the resultant color.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.MergeCopy">
 <summary>
 [ Destination = Source AND Pattern) ]
 <para></para>
 Merges the colors of the source rectangle with the brush currently selected in hdcDest, 
 by using the Boolean AND operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.MergePaint">
 <summary>
 [ Destination = NOT Source OR Destination ]
 <para></para>
 Merges the colors of the inverted source rectangle with the colors of the destination rectangle 
 by using the Boolean OR operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.PatCopy">
 <summary>
 [ Destination = Pattern ]
 <para></para>
 Copies the brush currently selected in hdcDest, into the destination bitmap.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.PatPaint">
 <summary>
 [ Destination = DPSnoo ]
 <para></para>
 Combines the colors of the brush currently selected in hdcDest, 
 with the colors of the inverted source rectangle by using the Boolean OR operator. 
 <para></para>
 The result of this operation is combined with the colors of the destination rectangle 
 by using the Boolean OR operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.PatInvert">
 <summary>
 [ Destination = Pattern XOR Destination ]
 <para></para>
 Combines the colors of the brush currently selected in hdcDest, 
 with the colors of the destination rectangle by using the Boolean XOR operator.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.DstInvert">
 <summary>
 [ Destination = NOT Destination ]
 <para></para>
 Inverts the destination rectangle.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.Blackness">
 <summary>
 [ Destination = BLACK ]
 <para></para>
 Fills the destination rectangle using the color associated with index 0 in the physical palette. 
 <para></para>
 (This color is black for the default physical palette).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.Whiteness">
 <summary>
 [ Destination = WHITE ]
 <para></para>
 Fills the destination rectangle using the color associated with index 1 in the physical palette.
 <para></para>
 (This color is white for the default physical palette).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.CaptureBlt">
 <summary>
 Capture window as seen on screen.
 <para></para>
 This includes layered windows such as WPF windows with AllowsTransparency="True"
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TernaryRasterOperations.NoMirrorBitmap">
 <summary>
 Prevents the bitmap from being mirrored.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.HResult">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies error conditions and warning conditions about the success or failure of a method or function call.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Wikipedia: <see href="http://en.wikipedia.org/wiki/HRESULT"/> class.
 <para></para>
 MSDN guidelines: <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff485842%28v=vs.85%29.aspx"/> class.
 <para></para>
 List of HRESULT codes: <see href="https://msdn.microsoft.com/en-us/library/cc704587.aspx"/> class.
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.S_OK">
 <summary>
 Success.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.S_FALSE">
 <summary>
 Success.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_ACCESSDENIED">
 <summary>
 Access denied.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_FAIL">
 <summary>
 Unspecified Error.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_INVALIDARG">
 <summary>
 Invalid parameter value.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_ELEMENTNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_OUTOFMEMORY">
 <summary>
 Out Of memory.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_POINTER">
 <summary>
 NULL was passed incorrectly For a pointer value.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_UNEXPECTED">
 <summary>
 Unexpected condition.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_ABORT">
 <summary>
 Operation aborted.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_HANDLE">
 <summary>
 Handle that is not valid.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_NOTIMPL">
 <summary>
 Not implemented.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_PENDING">
<summary>
The data necessary to complete this operation is not yet available.
</summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.DISP_E_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.DISP_E_DIVBYZERO">
 <summary>
 A divide by zero error.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_BOUNDS">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.E_CHANGED_STATE">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_BAD_FORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_ARITHMETIC_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_PATH_NOT_FOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_FILE_NOT_FOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_FILENAME_EXCED_RANGE">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_STACK_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_SHARING_VIOLATION">
 <summary>
 The process cannot access the file because it is being used by another process.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.FUSION_E_INVALID_NAME">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.FUSION_E_REF_DEF_MISMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.NTE_FAIL">
 <summary>
 Error wrapped in <see cref="T:System.Security.Cryptography.CryptographicException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.REGDB_E_CLASSNOTREG">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.RO_E_CLOSED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.TYPE_E_TYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.InvalidCastException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.TYPE_E_ELEMENTNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.NO_OBJECT">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.ERROR_CANCELLED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_ABANDONEDMUTEX">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_AMBIGUOUSMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_APPDOMAINUNLOADED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_APPLICATION">
 <summary>
 Error wrapped in <see cref="T:System.ApplicationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_ARGUMENTOUTOFRANGE">
 <summary>
 Error wrapped in <see cref="T:System.ArgumentOutOfRangeException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_ARRAYTYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.ArrayTypeMismatchException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_CANNOTUNLOADAPPDOMAIN">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_CONTEXTMARSHAL">
 <summary>
 Error wrapped in <see cref="T:System.ContextMarshalException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_CUSTOMATTRIBUTEFORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_DATAMISALIGNED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_DLLNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_DUPLICATEWAITOBJECT">
 <summary>
 Error wrapped in <see cref="T:System.DuplicateWaitObjectException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_ENDOFSTREAM">
 <summary>
 Error wrapped in <see cref="T:System.IO.EndOfStreamException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_FILELOAD">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_EXCEPTION">
 <summary>
 Error wrapped in <see cref="T:System.Exception"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_EXECUTIONENGINE">
 <summary>
 Error wrapped in <see cref="T:System.ExecutionEngineException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_FIELDACCESS">
 <summary>
 Error wrapped in <see cref="T:System.FieldAccessException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_FORMAT">
 <summary>
 Error wrapped in <see cref="T:System.FormatException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_HOSTPROTECTION">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INDEXOUTOFRANGE">
 <summary>
 Error wrapped in <see cref="T:System.IndexOutOfRangeException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INSUFFICIENTEXECUTIONSTACK">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INSUFFICIENTMEMORY">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDCAST">
 <summary>
 Error wrapped in <see cref="T:System.InvalidCastException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDCOMOBJECT">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.InvalidComObjectException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDFILTERCRITERIA">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.InvalidFilterCriteriaException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDOLEVARIANTTYPE">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDOPERATION">
 <summary>
 Error wrapped in <see cref="T:System.InvalidOperationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_IO">
 <summary>
 Error wrapped in <see cref="T:System.IO.IOException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_INVALIDPROGRAM">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_KEYNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MARSHALDIRECTIVE">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MEMBERACCESS">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_METHODACCESS">
 <summary>
 Error wrapped in <see cref="T:System.MethodAccessException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MISSINGFIELD">
 <summary>
 Error wrapped in <see cref="T:System.MissingFieldException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MISSINGMANIFESTRESOURCE">
 <summary>
 Error wrapped in <see cref="T:System.Resources.MissingManifestResourceException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MISSINGMEMBER">
 <summary>
 Error wrapped in <see cref="T:System.MissingMemberException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MISSINGMETHOD">
 <summary>
 Error wrapped in <see cref="T:System.MissingMethodException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MISSINGSATELLITEASSEMBLY">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_MULTICASTNOTSUPPORTED">
 <summary>
 Error wrapped in <see cref="T:System.MulticastNotSupportedException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_NOTFINITENUMBER">
 <summary>
 Error wrapped in <see cref="T:System.NotFiniteNumberException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_NOTSUPPORTED">
 <summary>
 Error wrapped in <see cref="T:System.NotSupportedException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_OBJECTDISPOSED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_OPERATIONCANCELED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_OVERFLOW">
 <summary>
 Error wrapped in <see cref="T:System.OverflowException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_PLATFORMNOTSUPPORTED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_RANK">
 <summary>
 Error wrapped in <see cref="T:System.RankException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_REFLECTIONTYPELOAD">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.ReflectionTypeLoadException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_REMOTING">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.Remoting.RemotingException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SERVER">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.ReflectionTypeLoadException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_RUNTIMEWRAPPED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SAFEARRAYRANKMISMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SAFEARRAYTYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SAFEHANDLEMISSINGATTRIBUTE">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SECURITY">
 <summary>
 Error wrapped in <see cref="T:System.Security.SecurityException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SEMAPHOREFULL">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SERIALIZATION">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.Serialization.SerializationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SYNCHRONIZATIONLOCK">
 <summary>
 Error wrapped in <see cref="T:System.Threading.SynchronizationLockException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_SYSTEM">
 <summary>
 Error wrapped in <see cref="T:System.SystemException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TARGET">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TARGETINVOCATION">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetInvocationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TARGETPARAMCOUNT">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetParameterCountException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_THREADABORTED">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadAbortException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_THREADINTERRUPTED">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadInterruptedException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_THREADSTART">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_THREADSTATE">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadStateException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_THREADSTOP">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TIMEOUT">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TYPEACCESS">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TYPEINITIALIZATION">
 <summary>
 Error wrapped in <see cref="T:System.TypeInitializationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TYPELOAD">
 <summary>
 Error wrapped in <see cref="T:System.EntryPointNotFoundException"/> class 
 and also <see cref="T:System.TypeLoadException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_TYPEUNLOADED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_UNSUPPORTEDFORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_VERIFICATION">
 <summary>
 Error wrapped in <see cref="T:System.Security.VerificationException"/> class.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.COR_E_WAITHANDLECANNOTBEOPENED">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.CORSEC_E_CRYPTO">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.CORSEC_E_CRYPTO_UNEX_OPER">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.CORSEC_E_MIN_GRANT_FAIL">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.CORSEC_E_NO_EXEC_PERM">
 <summary>
 
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.HResult.CORSEC_E_POLICY_EXCEPTION">
 <summary>
 
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.DwmWindowAttribute">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the attribute to set when calling the <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.DwmSetWindowAttribute(System.IntPtr,SmartBotKit.Interop.Win32.DwmWindowAttribute,System.IntPtr,System.UInt32)"/> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb762108(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.NcRenderingEnabled">
 <summary>
 Is non-client rendering enabled/disabled.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.NcRenderingPolicy">
 <summary>
 Non-client rendering policy.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.TransitionsForceDisabled">
 <summary>
 Potentially enable/forcibly disable transitions.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.AllowNcPaint">
 <summary>
 Allow contents rendered In the non-client area To be visible On the DWM-drawn frame.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.CaptionButtonBounds">
 <summary>
 Bounds Of the caption button area In window-relative space.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.NonClientRtlLayout">
 <summary>
 Set the non-client content RTL mirrored.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.ForceIconicRepresentation">
 <summary>
 Force this window To display iconic thumbnails.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.Flip3DPolicy">
 <summary>
 Designates how Flip3D will treat the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.ExtendedFrameBounds">
 <summary>
 Gets the extended frame bounds rectangle In screen space.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.HasIconicBitmap">
 <summary>
 Indicates an available bitmap When there Is no better thumbnail representation.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.DisallowPeek">
 <summary>
 Don't invoke Peek on the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.ExcludedFromPeek">
 <summary>
 Set LivePreview exclusion information.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.Cloak">
 <summary>
 Cloaks or uncloaks the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.Cloaked">
 <summary>
 Gets the cloaked state Of the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.FreezeRepresentation">
 <summary>
 Force this window To freeze the thumbnail without live update.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.WindowLongFlags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Controls how a window is to be shown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.WindowStyle">
 <summary>
 Retrieves the window styles.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.WindowStyleEx">
 <summary>
 Retrieves the extended window styles.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.HInstance">
 <summary>
 Retrieves a handle to the application instance.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.HwndParent">
 <summary>
 Retrieves a handle to the parent window, if any.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.Id">
 <summary>
 Retrieves the identifier of the window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.UserData">
 <summary>
 Retrieves the user data associated with the window.
 <para></para>
 This data is intended for use by the application that created the window.
 <para></para>
 Its value is initially zero.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.WndProc">
 <summary>
 Retrieves the address of the window procedure, or a handle representing the address of the window procedure.
 <para></para>
 You must use the <c>CallWindowProc</c> function to call the window procedure.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.DlgUser">
 <summary>
 ( This value is only available when the <c>hwnd</c> parameter identifies a dialog box. )
 <para></para>
 Retrieves extra information private to the application, such as handles or pointers.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.DlgMsgresult">
 <summary>
 ( This value is only available when the <c>hwnd</c> parameter identifies a dialog box. )
 <para></para>
 Retrieves the return value of a message processed in the dialog box procedure.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowLongFlags.DlgProc">
 <summary>
 ( This value is only available when the <c>hwnd</c> parameter identifies a dialog box. )
 <para></para>
 Retrieves the address of the dialog box procedure, 
 or a handle representing the address of the dialog box procedure.
 <para></para>
 You must use the <c>CallWindowProc</c> function to call the dialog box procedure.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.WindowStylesEx">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Extended window styles.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/ff700543%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.AcceptFiles">
 <summary>
 Specifies a window that accepts drag-drop files.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.AppWindow">
 <summary>
 Forces a top-level window onto the taskbar when the window is visible.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.ClientEdge">
 <summary>
 Specifies a window that has a border with a sunken edge.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.Composited">
 <summary>
 Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
 <para></para>
 This cannot be used if the window has a class style of either <c>CS_OWNDC</c> or <c>CS_CLASSDC</c>.
 <para></para>
 With <see cref="F:SmartBotKit.Interop.Win32.WindowStylesEx.Composited"/> set, 
 all descendants of a window get bottom-to-top painting order using double-buffering.
 <para></para>
 Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
 but only if the descendent window also has the<see cref="F:SmartBotKit.Interop.Win32.WindowStylesEx.Transparent"/> bit set.
 <para></para>
 Double-buffering allows the window and its descendents to be painted without flicker.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.ContextHelp">
 <summary>
 Specifies a window that includes a question mark in the title bar.
 <para></para>
 When the user clicks the question mark, the cursor changes to a question mark with a pointer.
 <para></para>
 If the user then clicks a child window, the child receives a <c>WM_HELP</c> message.
 <para></para>
 The child window should pass the message to the parent window procedure, 
 which should call the <c>WinHelp</c> function using the <c>HELP_WM_HELP</c> command.
 <para></para>
 The Help application displays a pop-up window that typically contains help for the child window.
 <para></para>
 <see cref="F:SmartBotKit.Interop.Win32.WindowStylesEx.ContextHelp"/> cannot be used with the <c>WS_MAXIMIZEBOX</c> or <c>WS_MINIMIZEBOX</c> styles.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.ControlParent">
 <summary>
 Specifies a window which contains child windows that should take part in dialog box navigation.
 <para></para>
 If this style is specified, the dialog manager recurses into children of 
 this window when performing navigation operations
 such as handling the <c>TAB</c> key, an arrow key, or a keyboard mnemonic.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.DlgModalFrame">
 <summary>
 Specifies a window that has a double border.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.Layered">
 <summary>
 Specifies a window that is a layered window.
 <para></para>
 This cannot be used for child windows or if the window has a class style of either <c>CS_OWNDC</c> or <c>CS_CLASSDC</c>.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.LayoutRtl">
 <summary>
 Specifies a window with the horizontal origin on the right edge.
 <para></para>
 Increasing horizontal values advance to the left.
 <para></para>
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.Left">
 <summary>
 Specifies a window that has generic left-aligned properties.
 <para></para>
 This is the default.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.LeftScrollbar">
 <summary>
 Specifies a window with the vertical scroll bar (if present) to the left of the client area.
 <para></para>
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.LtrReading">
 <summary>
 Specifies a window that displays text using left-to-right reading-order properties.
 <para></para>
 This is the default.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.MdiChild">
 <summary>
 Specifies a multiple-document interface (MDI) child window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.NoActivate">
 <summary>
 Specifies a top-level window created with this style does not become the 
 foreground window when the user clicks it.
 <para></para>
 The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
 <para></para>
 The window does not appear on the taskbar by default.
 <para></para>
 To force the window to appear on the taskbar, use the <see cref="F:SmartBotKit.Interop.Win32.WindowStylesEx.AppWindow"/> style.
 <para></para>
 To activate the window, use the NativeMethods.SetActiveWindow or NativeMethods.SetForegroundWindow function.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.NoInheritLayout">
 <summary>
 Specifies a window which does not pass its window layout to its child windows.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.NoParentNotify">
 <summary>
 Specifies that a child window created with this style does not send the <c>WM_PARENTNOTIFY</c> message 
 to its parent window when it is created or destroyed.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.OverlappedWindow">
 <summary>
 Specifies an overlapped window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.PaletteWindow">
 <summary>
 Specifies a palette window, which is a modeless dialog box that presents an array of commands.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.Right">
 <summary>
 Specifies a window that has generic "right-aligned" properties. This depends on the window class.
 <para></para>
 The shell language must support reading-order alignment for this to take effect.
 <para></para>
 Using the <see cref="F:SmartBotKit.Interop.Win32.WindowStylesEx.Right"/> style has the same effect as 
 using the <c>SS_RIGHT</c> (static), <c>ES_RIGHT</c> (edit), 
 and <c>BS_RIGHT</c>/<c>BS_RIGHTBUTTON</c> (button) control styles.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.RightScrollbar">
 <summary>
 Specifies a window with the vertical scroll bar (if present) to the right of the client area.
 <para></para>
 This is the default.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.RtlReading">
 <summary>
 Specifies a window that displays text using right-to-left reading-order properties.
 <para></para>
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.StaticEdge">
 <summary>
 Specifies a window with a three-dimensional border style intended to be used for 
 items that do not accept user input.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.ToolWindow">
 <summary>
 Specifies a window that is intended to be used as a floating toolbar.
 <para></para>
 A tool window has a title bar that is shorter than a normal title bar, 
 and the window title is drawn using a smaller font.
 <para></para>
 A tool window does not appear in the taskbar or in the dialog that appears when the user presses <c>ALT</c>+<c>TAB</c>.
 <para></para>
 If a tool window has a system menu, its icon is not displayed on the title bar.
 <para></para>
 However, you can display the system menu by right-clicking or by typing <c>ALT</c>+<c>SPACE</c>.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.TopMost">
 <summary>
 Specifies a window that should be placed above all non-topmost windows and should stay above them, 
 even when the window is deactivated.
 <para></para>
 To add or remove this style, use the <c>SetWindowPos</c> function.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.Transparent">
 <summary>
 Specifies a window that should not be painted until siblings beneath the window 
 (that were created by the same thread) have been painted.
 <para></para>
 The window appears transparent because the bits of underlying sibling windows have already been painted.
 <para></para>
 To achieve transparency without these restrictions, use the <c>SetWindowRgn</c> function.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowStylesEx.WindowEdge">
 <summary>
 Specifies a window that has a border with a raised edge.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.CTaskbarList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 <c>CLSID_TaskbarList</c> from <c>shobjidl.h</c> headers.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.ITaskbarList4">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exposes methods that control the taskbar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd562040(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.TaskbarList">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides internal access to the functions provided by the ITaskbarList4 interface, 
 without being forced to refer to it through another singleton.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.TaskbarList.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="F:SmartBotKit.Interop.Win32.TaskbarList.taskbarList"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.TaskbarProgressBarState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a thumbnail progress bar state.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd391697%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.TaskbarProgressBarState.NoProgress">
 <summary>
 No progress is displayed.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TaskbarProgressBarState.Indeterminate">
 <summary>
 The progress is indeterminate (marquee).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TaskbarProgressBarState.Normal">
 <summary>
 Normal progress is displayed.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TaskbarProgressBarState.Error">
 <summary>
 An error occurred (red).
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.TaskbarProgressBarState.Paused">
 <summary>
 The operation is paused (yellow).
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.NativeHotkeyModifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a key-modifier to assign for a hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms646309%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.None">
 <summary>
 Specifies any modifier.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.Alt">
 <summary>
 The <c>ALT</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.Control">
 <summary>
 The <c>CTRL</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.Shift">
 <summary>
 The <c>SHIFT</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.Win">
 <summary>
 The <c>WIN</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeHotkeyModifiers.NoRepeat">
 <summary>
 Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.WindowsMessages">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The system sends or posts a system-defined message when it communicates with an application. 
 <para></para>
 It uses these messages to control the operations of applications and to provide input and other information for applications to process. 
 <para></para>
 An application can also send or post system-defined messages.
 <para></para>
 Applications generally use these messages to control the operation of control windows created by using preregistered window classes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowsMessages.Null">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.Null"/> message performs no operation.
 <para></para>
 An application sends the <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.Null"/> message if it wants to 
 post a message that the recipient window will ignore.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_Hotkey">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Posted when the user presses a hot key registered by the <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.RegisterHotKey(System.IntPtr,System.Int32,System.UInt32,System.UInt32)"/> function. 
 <para></para>
 The message is placed at the top of the message queue associated with the thread that registered the hot key.
 <para></para>
 
 <c>wParam</c> 
 The identifier of the hot key that generated the message.
 If the message was generated by a system-defined hot key.
 <para></para>
 
 <c>lParam</c> 
 The low-order word specifies the keys that were to be pressed in 
 combination with the key specified by the high-order word to generate the 
 <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_Hotkey"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646279%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_DwmSendIconicThumbnail">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Instructs a window to provide a static bitmap to use as a thumbnail representation of that window.
 <para></para>
 Desktop Window Manager (DWM) sends this message to a window if all of the following situations are true: 
 <para></para>
 <c>DWM</c> is displaying an iconic representation of the window.
 <para></para>
 The <see cref="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.HasIconicBitmap"/> and <see cref="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.ForceIconicRepresentation"/> attributes are set on the window.
 <para></para>
 The window did not set a cached bitmap.
 <para></para>
 There is room in the cache for another bitmap.
 <para></para>
 
 <c>wParam</c> 
 Not used. 
 <para></para>
 
 <c>lParam</c> 
 The <c>HIWORD</c> of this value is the maximum possible width of the thumbnail.
 <para></para>
 The <c>LOWORD</c> is the maximum possible height.
 <para></para>
 If a thumbnail has a dimension that exceeds one or both of these values, 
 the <c>DWM</c> does not accept the thumbnail.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd938875%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_DwmSendIconicLivePreviewBitmap">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Instructs a window to provide a static bitmap to use as a live preview (also known as a <c>Peek preview</c>) 
 of that window.
 <para></para>
 Desktop Window Manager (DWM) sends this message to a window if all of the following situations are true: 
 <para></para>
 Live preview has been invoked on the window
 <para></para>
 The <see cref="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.HasIconicBitmap"/> and <see cref="F:SmartBotKit.Interop.Win32.DwmWindowAttribute.ForceIconicRepresentation"/> attributes are set on the window.
 <para></para>
 An iconic representation is the only one that exists for this window.
 <para></para>
 
 <c>wParam</c> 
 Not used. 
 <para></para>
 
 <c>lParam</c> 
 Not used.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd938874%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.NativeMethods">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 <para></para>
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/> must not be applied to this class.
 <para></para>
 This class is for methods that can be used anywhere because a stack walk will be performed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/ms182161.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,SmartBotKit.Interop.Win32.TernaryRasterOperations)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from 
 the specified source device context into a destination device context.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/dd183370%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the destination device context.
 </param>
 
 <param name="nXDest">
 The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.
 </param>
 
 <param name="nYDest">
 The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.
 </param>
 
 <param name="nWidth">
 The width, in logical units, of the source and destination rectangles.
 </param>
 
 <param name="nHeight">
 The height, in logical units, of the source and the destination rectangles.
 </param>
 
 <param name="hdcSrc">
 A handle to the source device context.
 </param>
 
 <param name="nXSrc">
 The x-coordinate, in logical units, of the upper-left corner of the source rectangle.
 </param>
 
 <param name="nYSrc">
 The y-coordinate, in logical units, of the upper-left corner of the source rectangle.
 </param>
 
 <param name="dwRop">
 A raster-operation code.
 These codes define how the color data for the source rectangle is to be combined with 
 <para></para>
 the color data for the destination rectangle to achieve the final color.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.BringWindowToTop(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated.
 <para></para>
 If the window is a child window, the top-level parent window associated with the child window is activated.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632673%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to bring to the top of the Z order.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the the window is zoomed, the return value is <see langword="True"/>.
 <para></para>
 If the window is not zoomed, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a bitmap compatible with the device that is associated with the specified device context. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183488(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the Device Context (DC).
 </param>
 
 <param name="width">
 The bitmap width, in pixels.
 </param>
 
 <param name="height">
 The bitmap height, in pixels.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.CreateCompatibleDC(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a memory device context (DC) compatible with the specified device.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183489%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to an existing device context (DC).
 <para></para>
 If this handle is <see cref="F:System.IntPtr.Zero"/>, 
 the function creates a memory device context (DC) compatible with the application's current screen.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the handle to a memory device context (DC).
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.DeleteDC(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes the specified device context (DC).
 <para></para>
 An application must not delete a DC whose handle was obtained by calling the "GetDC" function. 
 instead, it must call the <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)"/> function to free the DC.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183533%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the device context.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.DeleteObject(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a logical pen, brush, font, bitmap, region, or palette,
 freeing all system resources associated with the object.
 <para></para>
 After the object is deleted, the specified handle is no longer valid.
 <para></para>
 Do not delete a drawing object (pen or brush) while it is still selected into a DC.
 <para></para>
 When a pattern brush is deleted, the bitmap associated with the brush is not deleted. 
 The bitmap must be deleted independently.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633540%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hObject">
 A handle to a logical pen, brush, font, bitmap, region, or palette.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the specified handle is not valid or is currently selected into a DC, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.DwmGetWindowAttribute(System.IntPtr,SmartBotKit.Interop.Win32.DwmWindowAttribute,SmartBotKit.Interop.Win32.NativeRectangle@,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the current value of a specified attribute applied to a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa969515%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 The handle to the window from which the attribute data is retrieved.
 </param>
 
 <param name="attribute">
 The attribute to retrieve
 </param>
 
 <param name="refAttribute">
 A pointer to a value that, when this function returns successfully, receives the current value of the attribute.
 <para></para>
 The type of the retrieved value depends on the value of the <paramref name="attribute"/> parameter.
 </param>
 
 <param name="sizeAttribute">
 The size of the <see cref="T:SmartBotKit.Interop.Win32.DwmWindowAttribute"/> value being retrieved.
 <para></para>
 The size is dependent on the type of the <paramref name="refAttribute"/> parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If this function succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 Otherwise, it returns an HRESULT error code.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.DwmSetWindowAttribute(System.IntPtr,SmartBotKit.Interop.Win32.DwmWindowAttribute,System.IntPtr,System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the value of non-client rendering attributes for a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa969524%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 The handle to the window that will receive the attributes.
 </param>
 
 <param name="attributeToSet">
 A single <see cref="T:SmartBotKit.Interop.Win32.DwmWindowAttribute"/> flag to apply to the window.
 <para></para>
 This parameter specifies the attribute and the <paramref name="attributeValue"/> parameter points to the value of that attribute.
 </param>
 
 <param name="attributeValue">
 A pointer to the value of the attribute specified in the <paramref name="attributeToSet"/> parameter.
 <para></para>
 Note that different <see cref="T:SmartBotKit.Interop.Win32.DwmWindowAttribute"/> flags require different value types.
 </param>
 
 <param name="attributeSize">
 The size, in bytes, of the value type pointed To by the <paramref name="attributeValue"/> parameter.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If this function succeeds, it returns <see cref="F:SmartBotKit.Interop.Win32.HResult.S_OK"/>. 
 Otherwise, it returns an <c>HRESULT</c> error code.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowDC(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars.
 <para></para>
 A window device context permits painting anywhere in a window, 
 because the origin of the device context is the upper-left corner of the window instead of the client area.
 <para></para>
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowDC(System.IntPtr)"/> assigns default attributes to the window device context 
 each time it retrieves the device context. Previous attributes are lost.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd144947%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window with a device context that is to be retrieved.
 If this value is <see cref="F:System.IntPtr.Zero"/>, 
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowDC(System.IntPtr)"/> retrieves the device context for the entire screen of the primary display monitor.
 <para></para>
 To get the device context for other display monitors, 
 use the "EnumDisplayMonitors" and "CreateDC" functions.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is a handle to a device context for the specified window.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating an error or an invalid <paramref name="hwnd"/> parameter.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633518%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="refWindowPlacement">
 A pointer to the <see cref="T:SmartBotKit.Interop.Win32.WindowPlacement"/> structure that receives the 
 show state and position information.
 <para></para>
 Before calling <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/>, set the length member to <c>Marshal.SizeOf(WindowPlacement)</c>.
 <para></para>
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/> fails if <paramref name="refWindowPlacement"/> length is not set correctly.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowRect(System.IntPtr,SmartBotKit.Interop.Win32.NativeRectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the text of the specified window's title bar (if it has one) into a buffer.
 <para></para>
 If the specified window is a control, the text of the control is copied.
 <para></para>
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> cannot retrieve the text of a control in another application than the calling application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633520%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window or control containing the text.
 </param>
 
 <param name="lpString">
 The buffer that will receive the text.
 <para></para>
 If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.
 </param>
 
 <param name="cch">
 The maximum number of characters to copy to the buffer, including the null character.
 <para></para>
 If the text exceeds this limit, it is truncated.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the length, in characters, of the copied string, 
 not including the terminating null character.
 <para></para>
 If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, 
 the return value is zero.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the identifier of the thread that created the specified window 
 and, optionally, the identifier of the process that created the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633522%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refPid">
 A pointer to a variable that receives the process identifier (PID). 
 <para></para>
 If this parameter is not <see langword="Nothing"/>, <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)"/> copies the identifier of 
 the process to the variable; otherwise, it does not.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The identifier of the thread that created the window.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.IsIconic(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified window is minimized (iconic). 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633527%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be tested.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window is iconic, the return value is <see langword="True"/>.
 <para></para>
 If the window is not iconic, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.IsWindow(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified window handle identifies an existing window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633528%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be tested. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window handle identifies an existing window, the return value is <see langword="True"/>.
 <para></para>
 If the window handle does not identify an existing window, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.IsWindowVisible(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the visibility state of the specified window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633530%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be tested. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the specified window, its parent window, its parent's parent window, and so forth, 
 have the <c>WS_VISIBLE</c> style, the return value is <see langword="True"/>.
 <para></para>
 Otherwise, the return value is <see langword="False"/>.
 <para></para>
 Because the return value specifies whether the window has the WS_VISIBLE style, 
 it may be nonzero even if the window is totally obscured by other windows.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.RegisterHotKey(System.IntPtr,System.Int32,System.UInt32,System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines a system-wide hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms646309%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window that will receive <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_Hotkey"/> messages 
 generated by the hot key.
 <para></para>
 If this parameter is <see cref="F:System.IntPtr.Zero"/>, 
 <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_Hotkey"/> messages are posted to the message queue of the calling thread 
 and must be processed in the message loop.
 </param>
 
 <param name="id">
 The identifier of the hotkey.
 <para></para>
 If the hwnd parameter is <c>0</c>, then the hotkey is associated with the current thread 
 rather than with a particular window.
 <para></para>
 If a hotkey already exists with the same <paramref name="hwnd"/> and <paramref name="id"/> parameters, 
 see Remarks for the action taken.
 </param>
 
 <param name="fsModifiers">
 The keys that must be pressed in combination with the key specified by the <paramref name="vk"/> parameter
 in order to generate the <see cref="F:SmartBotKit.Interop.Win32.WindowsMessages.WM_Hotkey"/> message.
 </param>
 
 <param name="vk">
 The virtual-key code of the hotkey.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases a device context (DC), freeing it for use by other applications.
 <para></para>
 The effect of the <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)"/> function depends on the type of DC. 
 It frees only common and window DCs. 
 It has no effect on class or private DCs.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd162920%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window whose DC is to be released.
 </param>
 
 <param name="hdc">
 A <see cref="T:System.IntPtr"/> handle to the DC to be released.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the DC was released, <see langword="False"/> if the DC was not released.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects an object into a specified device context.
 <para></para>
 The new object replaces the previous object of the same type. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd162957%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the Device Context (DC).
 </param>
 
 <param name="hObject">
 A handle to the object to be selected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the selected object is not a region and the function succeeds, 
 the return value is a handle to the object being replaced.
 <para></para>
 If the selected object is a region and the function succeeds, 
 the return value is one of the following values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetForegroundWindow(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Brings the thread that created the specified window into the foreground and activates the window. 
 <para></para>
 Keyboard input is directed to the window, and various visual cues are changed for the user. 
 <para></para>
 The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633539%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window that should be activated and brought to the foreground.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window was brought to the foreground, the return value is <see langword="True"/>.
 If the window was not brought to the foreground, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the show state and the restored, minimized, and maximized positions of the specified window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633544(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="refWindowPlacement">
 A pointer to the <see cref="T:SmartBotKit.Interop.Win32.WindowPlacement"/> structure that 
 specifies the new show state and window positions.
 <para></para>
 Before calling <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/>, set the length member to <c>Marshal.SizeOf(WindowPlacement)</c>.
 <para></para>
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/> fails if <paramref name="refWindowPlacement"/> length is not set correctly.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SmartBotKit.Interop.Win32.SetWindowPosFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the size, position, and Z order of a child, pop-up, or top-level window.
 <para></para>
 These windows are ordered according to their appearance on the screen.
 <para></para>
 The topmost window receives the highest rank and is the first window in the Z order.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/ms633545(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="hwndInsertAfter">
 A handle to the window to precede the positioned window in the Z order.
 </param>
 
 <param name="x">
 The new position of the left side of the window, in client coordinates.
 </param>
 
 <param name="y">
 The new position of the top of the window, in client coordinates.
 </param>
 
 <param name="cx">
 The new width of the window, in pixels.
 </param>
 
 <param name="cy">
 The new height of the window, in pixels.
 </param>
 
 <param name="uFlags">
 The window sizing and positioning flags.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowText(System.IntPtr,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the text of the specified window's title bar (if it has one). 
 <para></para>
 If the specified window is a control, the text of the control is changed. 
 <para></para>
 However, <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowText(System.IntPtr,System.String)"/> cannot change the text of a control in another application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633546(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window or control whose text is to be changed. 
 </param>
 
 <param name="text">
 The new title or control text. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>
 <para></para>
 If the function fails, the return value is <see langword="False"/>. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.ShowWindow(System.IntPtr,SmartBotKit.Interop.Win32.NativeWindowState)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the specified window's show state.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="windowState">
 Controls how the window is to be shown.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the window was previously visible, the return value is <see langword="True"/>.
 <para></para>
 If the window was previously hidden, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.UnregisterHotKey(System.IntPtr,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unregisters a hotkey previously registered with <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.RegisterHotKey(System.IntPtr,System.Int32,System.UInt32,System.UInt32)"/> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646327%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window associated with the hot key to be freed.
 <para></para>
 This parameter should be <see cref="F:System.IntPtr.Zero"/> if the hot key is not associated with a window. 
 </param>
 
 <param name="id">
 The identifier of the hotkey to be unregistered.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the name of the class to which the specified window belongs.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633582(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="className">
 The class name string. 
 </param>
 
 <param name="maxCount">
 The length of the <paramref name="className"/> buffer, in characters. 
 <para></para>
 The buffer must be large enough to include the terminating null character; 
 otherwise, the class name string is truncated to <paramref name="maxCount"/>-1 characters. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the number of characters copied to the buffer, 
 not including the terminating null character.
 <para></para>
 If the function fails, the return value is <c>0</c>. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowLong(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves information about the specified window.
 <para></para>
 The function also retrieves the 32-bit (<c>DWORD</c>) value at the specified offset into the extra window memory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633584%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="flags">
 The zero-based offset to the value to be retrieved.
 <para></para>
 Valid values are in the range zero through the number of bytes of extra window memory, 
 minus the size of an integer.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the requested value.
 <para></para>
 If the function fails, the return value is zero.
 <para></para>
 If SetWindowLong has not been called previously, 
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowLong(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags)"/> returns zero for values in the extra window or class memory.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowLongPtr(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves information about the specified window.
 <para></para>
 The function also retrieves the value at a specified offset into the extra window memory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633585%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="flags">
 The zero-based offset to the value to be retrieved.
 <para></para>
 Valid values are in the range zero through the number of bytes of extra window memory, 
 minus the size of an integer
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the requested value.
 <para></para>
 If the function fails, the return value is zero.
 <para></para>
 If SetWindowLongPtr has not been called previously, 
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowLongPtr(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags)"/> returns zero for values in the extra window or class memory.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowLong(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags,System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes an attribute of the specified window.
 <para></para>
 The function also sets the 32-bit (<c>LONG</c>) value at the specified offset into the extra window memory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633591%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="flags">
 The zero-based offset to the value to be set. 
 <para></para>
 Valid values are in the range zero through the number of bytes of extra window memory, 
 minus the size of an integer.
 </param>
 
 <param name="newLong">
 The replacement value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the previous value of the specified 32-bit integer.
 <para></para>
 If the function fails, the return value is zero.
 <para></para>
 If the previous value of the specified 32-bit integer is zero, 
 and the function succeeds, the return value is zero.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeMethods.SetWindowLongPtr(System.IntPtr,SmartBotKit.Interop.Win32.WindowLongFlags,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes an attribute of the specified window.
 <para></para>
 The function also sets a value at the specified offset in the extra window memory.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/ms644898%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 <para></para>
 The SetWindowLongPtr function fails if the process that owns the window specified by the 
 <paramref name="hwnd"/> parameter is at a higher process privilege in the 
 <c>UIPI</c> hierarchy than the process the calling thread resides in.
 </param>
 
 <param name="flags">
 The zero-based offset to the value to be set. 
 <para></para>
 Valid values are in the range zero through the number of bytes of extra window memory, 
 minus the size of an integer.
 </param>
 
 <param name="newLong">
 The replacement value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the previous value of the specified offset.
 <para></para>
 If the function fails, the return value is zero.
 <para></para>
 If the previous value is zero and the function succeeds, the return value is zero.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.NativePoint">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the x- and y- coordinates of a point.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162805%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.NativePoint.X">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The X-coordinate of the point.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.NativePoint.Y">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The Y-coordinate of the point.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativePoint.#ctor(System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="x">
 The X-coordinate of the point.
 </param>
 
 <param name="y">
 The Y-coordinate of the point.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativePoint.#ctor(System.Drawing.Point)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pt">
 A <see cref="T:System.Drawing.Point"/> that contains the X-coordinate and the Y-coordinate.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativePoint.op_Implicit(SmartBotKit.Interop.Win32.NativePoint)~System.Drawing.Point">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/> to <see cref="T:System.Drawing.Point"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pt">
 The <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Point"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativePoint.op_Implicit(System.Drawing.Point)~SmartBotKit.Interop.Win32.NativePoint">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:System.Drawing.Point"/> to <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="pt">
 The <see cref="T:System.Drawing.Point"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:SmartBotKit.Interop.Win32.NativePoint"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the coordinates of the upper-left and lower-right corners of a rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162897%28v=vs.85%29.aspx"/>
 <para></para>
 <see href="http://www.pinvoke.net/default.aspx/Structures/rect.html"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.Win32.NativeRectangle.Left">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.Win32.NativeRectangle.Top">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.Win32.NativeRectangle.Right">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.Win32.NativeRectangle.Bottom">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="left">
 The x-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="top">
 The y-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="right">
 The x-coordinate of the lower-right corner of the rectangle.
 </param>
 
 <param name="bottom">
 The y-coordinate of the lower-right corner of the rectangle.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeRectangle.#ctor(System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeRectangle.op_Implicit(SmartBotKit.Interop.Win32.NativeRectangle)~System.Drawing.Rectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/> to <see cref="T:System.Drawing.Rectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Rectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.Win32.NativeRectangle.op_Implicit(System.Drawing.Rectangle)~SmartBotKit.Interop.Win32.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:SmartBotKit.Interop.Win32.NativeRectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.Win32.NativeWindowState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Controls how a window is to be shown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Hide">
 <summary>
 Hides the window and activates another window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Normal">
 <summary>
 Activates and displays a window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when displaying the window for the first time.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowMinimized">
 <summary>
 Activates the window and displays it as a minimized window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Maximize">
 <summary>
 Maximizes the specified window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowMaximized">
 <summary>
 Activates the window and displays it as a maximized window.
 </summary>      
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowNoActivate">
 <summary>
 Displays a window in its most recent size and position. 
 This value is similar to <see cref="F:SmartBotKit.Interop.Win32.NativeWindowState.Normal"/>, except the window is not actived.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Show">
 <summary>
 Activates the window and displays it in its current size and position.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Minimize">
 <summary>
 Minimizes the specified window and activates the next top-level window in the Z order.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowMinNoActive">
 <summary>
 Displays the window as a minimized window. 
 This value is similar to <see cref="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowMinimized"/>, except the window is not activated.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowNA">
 <summary>
 Displays the window in its current size and position.
 This value is similar to <see cref="F:SmartBotKit.Interop.Win32.NativeWindowState.Show"/>, except the window is not activated.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.Restore">
 <summary>
 Activates and displays the window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when restoring a minimized window.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ShowDefault">
 <summary>
 Sets the show state based on the SW_* value specified in the <c>STARTUPINFO</c> structure 
 passed to the <c>CreateProcess</c> function by the program that started the application.
 </summary>
</member>
<member name="F:SmartBotKit.Interop.Win32.NativeWindowState.ForceMinimize">
 <summary>
 <b>Windows 2000/XP:</b> 
 Minimizes a window, even if the thread that owns the window is not responding. 
 This flag should only be used when minimizing windows from a different thread.
 </summary>
</member>
<member name="T:SmartBotKit.Interop.Win32.WindowPlacement">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains information about the placement of a window on the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632611%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.Length">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The length of the structure, in bytes.
 <para></para>
 Before calling the <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/> 
 or NativeMethods.SetWindowPlacement functions, 
 set this member to <c>Marshal.SizeOf(WindowPlacement)</c>.
 <para></para>
 <see cref="M:SmartBotKit.Interop.Win32.NativeMethods.GetWindowPlacement(System.IntPtr,SmartBotKit.Interop.Win32.WindowPlacement@)"/> and NativeMethods.SetWindowPlacement 
 fail if this member is not set correctly.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.Flags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies flags that control the position of the minimized window 
 and the method by which the window is restored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.WindowState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The current show state of the window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.MinPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The coordinates of the window's upper-left corner when the window is minimized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.MaxPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The coordinates of the window's upper-left corner when the window is maximized.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.Win32.WindowPlacement.NormalPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The window's coordinates when the window is in the restored position.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.Win32.WindowPlacement.Default">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the default (empty) value.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Interop.SmartBotUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides reusable automation utilities for SmartBot process.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.Process">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the SmartBot <see cref="T:System.Diagnostics.Process"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The SmartBot <see cref="T:System.Diagnostics.Process"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Interop.SmartBotUtil.processB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 <para></para>
 Gets the SmartBot <see cref="T:System.Diagnostics.Process"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.IsInSplashScreen">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the SmartBot process is displaying the 'Loading' splash screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if SmartBot window is displaying the splashscreen; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.MainThreadId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets identifier of the thread that created the SmartBot main window; the UI thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The identifier of the thread that created the SmartBot main window; the UI thread.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.UIElementTextBoxLog">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Windows.Automation.AutomationElement"/> that represents the 'TextBoxLog' control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.UIElementStatsLabel">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Windows.Automation.AutomationElement"/> that represents the 'Statslabel' control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.StatsLabelText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text of the 'Statslabel' control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.TextBoxLogText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text of the 'TextBoxLog' control.
 <para></para>
 Note that a call to <see cref="P:SmartBotKit.Interop.SmartBotUtil.TextBoxLogText"/> property will throw a 
 <see cref="T:System.NullReferenceException"/> exception if the 'TextBoxLog' control is not visible in the UI. 
 That is, if the 'Missplays', 'Changelog' or 'Debug' tab is the active one.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.CurrentLogContent">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the content of the current logfile shown in SmartBot UI.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.LastLogLine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the last logfile line shown in SmartBot UI.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.LastServerDownRecord">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a <see cref="T:System.TimeSpan"/> that represents the exact hour that the SmartBot's server was down for last time.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.WinsRatio">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current wins ratio percentage string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The wins ratio percentage string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.WindowPlacement">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the SmartBot window placement.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window placement.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.WindowPosition">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the SmartBot window position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window position.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.WindowSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the SmartBot window size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The Hearthstone window size.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.PluginsDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory where the SmartBot plugins are stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.SmartBotDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the main directory of SmartBot.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.CrashesDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory where the SmartBot crash logs are stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.LogsDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory where the SmartBot logs are stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.SeedsDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory where the SmartBot seeds are stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.Interop.SmartBotUtil.ScreenshotsDir">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directory where the SmartBot screenshots are stored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.SmartBotUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.Interop.SmartBotUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.SmartBotUtil.GetAutomationElement(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an <see cref="T:System.Windows.Automation.AutomationElement"/> that has the specified automation id. in the SmartBot main window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Automation.AutomationElement"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.SmartBotUtil.GetWinsRatio">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current wins ratio percentage string.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The wins ratio percentage string.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.Interop.SmartBotUtil.GetAutomationElement(System.Diagnostics.Process,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets an <see cref="T:System.Windows.Automation.AutomationElement"/> that has the specified automation id. in the SmartBot window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="process">
 The SmartBot <see cref="T:System.Diagnostics.Process"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Windows.Automation.AutomationElement"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.ReservedUse.UpdateUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides utilities for version update check of SmartBotKit plugin bundle.
 <para></para>
 Note: the usage of this class is reserved by SmartBotKit plugins, don't use it by yourself.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.ReservedUse.UpdateUtil.IsUpdateChecked">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to prevent redundant calls from multiple plugins checking for updates.
 <para></para>
 Note: the usage of this field is reserved by SmartBotKit plugins, don't use it by yourself.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.ReservedUse.UpdateUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.ReservedUse.UpdateUtil"/> class from being created.
 <para></para>
 Note: the usage of this class is reserved by SmartBotKit plugins, don't use it by yourself.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.ReservedUse.UpdateUtil.RunUpdaterExecutable">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Runs the SmartBotkitUpdater.exe file.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.SystemInfo.SystemInfoUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains operating system info.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.SystemInfo.SystemInfoUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="N:SmartBotKit.SystemInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsVirtualMachine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the current application is running in a Virtual Machine OS.
 <para></para>
 The detection algorithm is compatible with:
 <para></para>
 Virtual-Box, VMWare, and QEmu.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the current application is running in a Virtual Machine OS, <see langword="False"/> otherwise.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWinXP">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows XP</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWinXP Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows XP.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows XP</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWinXPOrGreater">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows XP</c>, or greater.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If Not IsWinXPOrGreater Then
     Throw New PlatformNotSupportedException("This application cannot run under the current Windows version.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows XP</c>, or greater.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWinVista">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows VISTA</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWinVista Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows VISTA.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows VISTA</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWinVistaOrGreater">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows VISTA</c>, or greater.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If Not IsWinVistaOrGreater Then
     Throw New PlatformNotSupportedException("This application cannot run under the current Windows version.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows VISTA</c>, or greater.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin7">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 7</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWin7 Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows 7.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 7</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin7OrGreater">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 7</c>, or greater.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If Not IsWin7OrGreater Then
     Throw New PlatformNotSupportedException("This application cannot run under the current Windows version.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 7</c>, or greater.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin8">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 8</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWin8 Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows 8.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 8</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin8OrGreater">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 8</c>, or greater.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If Not IsWin8OrGreater Then
     Throw New PlatformNotSupportedException("This application cannot run under the current Windows version.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 8</c>, or greater.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin81">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 8.1</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWin81 Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows 8.1.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 8.1</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin81OrGreater">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 8.1</c>, or greater.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If Not IsWin81OrGreater Then
     Throw New PlatformNotSupportedException("This application cannot run under the current Windows version.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 8.1</c>, or greater.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.SystemInfo.SystemInfoUtil.IsWin10">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value that determines whether the current operating system is <c>Windows 10</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 If IsWin10 Then
     Throw New PlatformNotSupportedException("This application cannot run under Windows 10.")
 End If
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that determines whether the current operating system is <c>Windows 10</c>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.SystemInfo.SystemInfoUtil.InternalIsVirtualMachine">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the current application is running in a Virtual Machine OS.
 <para></para>
 The detection algorithm is compatible with:
 <para></para>
 Virtual-Box, VMWare, and QEmu.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the current application is running in a Virtual Machine OS, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.SystemInfo.SystemInfoUtil.InternalIsWin10">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the current operating system is <c>Windows 10</c>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="https://msdn.microsoft.com/es-es/library/windows/desktop/dn424972%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the current operating system is <c>Windows 10</c>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.Text.StringCase">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a string case.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.Text.StringCase.LowerCase">
 <summary>
 LowerCase
 <para></para>
 
 [Example]
 <para></para>
 Input : ABCDEF
 <para></para>
 Output: abcdef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.UpperCase">
 <summary>
 UpperCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abcdef
 <para></para>
 Output: ABCDEF
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.TitleCase">
 <summary>
 TitleCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abcdef
 <para></para>
 Output: Abcdef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.WordCase">
 <summary>
 WordCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abc def
 <para></para>
 Output: Abc Def
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.CamelCaseLower">
 <summary>
 CamelCase (With first letter to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ABC DEF
 <para></para>
 Output: abcDef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.CamelCaseUpper">
 <summary>
 CamelCase (With first letter to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ABC DEF
 <para></para>
 Output: AbcDef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.MixedTitleCaseLower">
 <summary>
 MixedCase (With first letter to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: aB Cd eF
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.MixedTitleCaseUpper">
 <summary>
 MixedCase (With first letter to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: Ab cD Ef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.MixedWordCaseLower">
 <summary>
 MixedCase (With first letter of each word to LowerCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: aB cD eF
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.MixedWordCaseUpper">
 <summary>
 MixedCase (With first letter of each word to UpperCase).
 <para></para>
 
 [Example]
 <para></para>
 Input : ab cd ef
 <para></para>
 Output: Ab Cd Ef
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.ToggleCase">
 <summary>
 ToggleCase.
 <para></para>
 
 [Example]
 <para></para>
 Input : abc def ghi
 <para></para>
 Output: aBC dEF gHI
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.DuplicateChars">
 <summary>
 Duplicates the characters.
 <para></para>
 
 [Example]
 <para></para>
 Input : Hello World!
 <para></para>
 Output: HHeelllloo  WWoorrlldd!!
 </summary>
</member>
<member name="F:SmartBotKit.Text.StringCase.AlternateChars">
 <summary>
 Alternates the characters.
 <para></para>
 
 [Example]
 <para></para>
 Input : Hello World!
 <para></para>
 Output: hELLO wORLD!
 </summary>
</member>
<member name="T:SmartBotKit.IO.HotkeyIsNotRegisteredException">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exception that is thrown when try to unregister a system-wide hotkey that is not registered.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsNotRegisteredException.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.HotkeyIsNotRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsNotRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.HotkeyIsNotRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.IO.HotkeyIsRegisteredException">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exception that is thrown when try to register a system-wide hotkey that is already registered.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsRegisteredException.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.HotkeyIsRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyIsRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.HotkeyIsRegisteredException"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 This constructor is used to deserialize values.
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="info">
 The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
 </param>
 
 <param name="context">
 The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 info
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.IO.HotkeyPressEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains the event data for the <see cref="E:SmartBotKit.IO.Hotkey.Press"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.HotkeyPressEventArgs.Key">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.HotkeyPressEventArgs.Modifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key-modifiers assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key-modifiers assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.HotkeyPressEventArgs.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The unique identifier assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyPressEventArgs.#ctor(System.Windows.Forms.Keys,SmartBotKit.IO.HotkeyModifiers,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.HotkeyPressEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="key">
 The key assigned to the hotkey.
 </param>
 
 <param name="modifiers">
 The key-modifiers assigned to the hotkey.
 </param>
 
 <param name="id">
 The unique identifier assigned to the hotkey.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.HotkeyPressEventArgs.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.IO.HotkeyPressEventArgs"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:SmartBotKit.IO.HotkeyModifiers">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a key-modifier to assign for a hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms646309%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.None">
 <summary>
 Specifies any modifier.
 </summary>
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.Alt">
 <summary>
 The <c>ALT</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.Control">
 <summary>
 The <c>CTRL</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.Shift">
 <summary>
 The <c>SHIFT</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.Win">
 <summary>
 The <c>WIN</c> keyboard key.
 </summary>
</member>
<member name="F:SmartBotKit.IO.HotkeyModifiers.NoRepeat">
 <summary>
 Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.
 </summary>
</member>
<member name="T:SmartBotKit.IO.Hotkey">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a system-wide hotkey for the current application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Public Class Form1 : Inherits Form
 
     Private WithEvents hotkey As Hotkey
 
     Public Sub Test() Handles MyBase.Shown
 
         MyClass.InitializeComponent()
 
         ' Registers a new global hotkey on the system. (Alt + Ctrl + A) 
         hotkey = New Hotkey(HotkeyModifiers.Alt Or HotkeyModifiers.Control, Keys.A)
 
         ' Replaces the current registered hotkey with a new one. (Alt + Escape)
         hotkey = New Hotkey(DirectCast([Enum].Parse(GetType(HotkeyModifiers), "Alt", True), HotkeyModifiers),
                             DirectCast([Enum].Parse(GetType(Keys), "Escape", True), Keys))
 
         ' Set the tag property.
         hotkey.Tag = "I'm a String tag"
 
     End Sub
 
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;summary&gt;
     ''' Handles the &lt;see cref="HotKey.Press"/&gt; event of the HotKey control.
     ''' &lt;/summary&gt;
     ''' ----------------------------------------------------------------------------------------------------
     ''' &lt;param name="sender"&gt;
     ''' The source of the event.
     ''' &lt;/param&gt;
     ''' 
     ''' &lt;param name="e"&gt;
     ''' The &lt;see cref="HotkeyPressEventArgs"/&gt; instance containing the event data.
     ''' &lt;/param&gt;
     ''' ----------------------------------------------------------------------------------------------------
     Private Sub HotKey_Press(ByVal sender As Object, ByVal e As HotkeyPressEventArgs) _
     Handles hotkey.Press
 
         Dim sb As New Global.System.Text.StringBuilder
         With sb
             .AppendLine(String.Format("Key.......: {0}", e.Key.ToString()))
             .AppendLine(String.Format("Modifiers.: {0}", e.Modifiers.ToString()))
             .AppendLine(String.Format("Identifier: {0}", e.Id))
             .AppendLine(String.Format("Press-count: {0}", DirectCast(sender, Hotkey).Count))
             .AppendLine(String.Format("Tag: {0}", DirectCast(sender, Hotkey).Tag.ToString()))
         End With
 
         MessageBox.Show(sb.ToString(), String.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information)
 
         ' Unregister the hotkey.
         Me.hotkey.Unregister()
 
         ' Is Registered?
         Debug.WriteLine(Me.hotkey.IsRegistered)
 
     End Sub
 
 End Class
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.Hotkey.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:SmartBotKit.IO.Hotkey"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.Hotkey.Key">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.Hotkey.keyB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.Hotkey.Modifier">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the key-modifiers assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The key-modifiers assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.Hotkey.modifierB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The key-modifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.Hotkey.Id">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The unique identifier assigned to the hotkey.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.Hotkey.idB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The unique identifier assigned to the hotkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:SmartBotKit.IO.Hotkey.Tag">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets an user-defined data associated with this object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The user-defined data associated with this object.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.Hotkey.events">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A list of event delegates.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:SmartBotKit.IO.Hotkey.Press">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the hotkey is pressed.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:SmartBotKit.IO.Hotkey"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.#ctor(SmartBotKit.IO.HotkeyModifiers,System.Windows.Forms.Keys)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:SmartBotKit.IO.Hotkey"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="modifier">
 One or more key-modifiers to assign to the hotkey.
 </param>
 
 <param name="key">
 The key to assign to the hotkey.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.IsRegistered">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether this hotkey is registered on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if this hotkey is registered; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.Register">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Registers this hotkey on the system.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:SmartBotKit.IO.HotkeyIsRegisteredException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.Unregister">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unregisters this hotkey from the system. So after calling this method the hotkey turns unavailable.
 <para></para>
 Note that the hotkey can be re-registered at any time calling the <see cref="M:SmartBotKit.IO.Hotkey.Register"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:SmartBotKit.IO.HotkeyIsNotRegisteredException">
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.OnHotkeyPress(SmartBotKit.IO.HotkeyPressEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:SmartBotKit.IO.Hotkey.Press"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:SmartBotKit.IO.HotkeyPressEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:SmartBotKit.IO.Hotkey.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:SmartBotKit.IO.Hotkey.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and, optionally, managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
</members>
</doc>
